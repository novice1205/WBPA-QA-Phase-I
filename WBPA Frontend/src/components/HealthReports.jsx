"use client"

import { useState, useEffect } from "react"
import { motion } from "framer-motion"
import { Download } from "lucide-react"
import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import { fetchHealthPredictions } from "./apiutils"

const mockLocations = ["Koramangala", "Indiranagar", "Whitefield", "Jayanagar", "JP Nagar"]
const mockLakes = {
  Koramangala: ["Bellandur Lake", "Madiwala Lake"],
  Indiranagar: ["Ulsoor Lake", "Sankey Tank"],
  Whitefield: ["Varthur Lake", "Kundalahalli Lake"],
  Jayanagar: ["Lalbagh Lake", "Yediyur Lake"],
  "JP Nagar": ["Puttenahalli Lake", "Sarakki Lake"],
}

const HealthReports = () => {
  const [formData, setFormData] = useState({
    location: "",
    nearbyWaterBody: "",
  })
  const [report, setReport] = useState({ diseases: [] })

  useEffect(() => {
    if (formData.location) {
      setFormData((prev) => ({ ...prev, nearbyWaterBody: mockLakes[formData.location]?.[0] || "" }))
    }
  }, [formData.location])

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value })
  }

  const generateReport = async (e) => {
    e.preventDefault()
    try {
      const diseases = await fetchHealthPredictions(formData)
      setReport({
        location: formData.location,
        nearbyWaterBody: formData.nearbyWaterBody,
        diseases,
      })
    } catch (error) {
      console.error("Error generating report:", error)
    }
  }

  const downloadReport = () => {
    if (!report || !report.diseases.length) return
  
    const pdf = new jsPDF()
  
    // Set Font & Colors
    pdf.setFont("helvetica")
    pdf.setTextColor(33, 37, 41) // Dark gray
  
    // Title Section
    pdf.setFontSize(22)
    pdf.setTextColor(0, 112, 243) // Blue
    pdf.text("WBPA-QA - Water Quality Health Report", 15, 20)
  
    pdf.setFontSize(12)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 15, 30)
  
    pdf.setDrawColor(200, 200, 200)
    pdf.line(15, 35, 195, 35) // Separator
  
    // Report Summary
    const summaryData = [
      ["Location", report.location],
      ["Nearby Water Body", report.nearbyWaterBody],
    ]
  
    autoTable(pdf,{
      startY: 40,
      head: [["Field", "Details"]],
      body: summaryData,
      theme: "grid",
      styles: { fontSize: 12, cellPadding: 5 },
      headStyles: { fillColor: [0, 112, 243], textColor: 255, fontStyle: "bold" },
      alternateRowStyles: { fillColor: [245, 245, 245] },
    })
  
    // Diseases Table
    pdf.setFontSize(16)
    pdf.setTextColor(0, 112, 243)
    pdf.text("Potential Water-borne Diseases", 15, pdf.lastAutoTable.finalY + 15)
  
    const diseaseData = report.diseases.map((disease, index) => [index + 1, disease])
  
    autoTable(pdf,{
      startY: pdf.lastAutoTable.finalY + 20,
      head: [["S.no.", "Diseases"]],
      body: diseaseData,
      theme: "striped",
      styles: { fontSize: 12, cellPadding: 5 },
      headStyles: { fillColor: [0, 112, 243], textColor: 255, fontStyle: "bold" },
    })
  
    // Footer
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    pdf.text("Report generated by WBPA-QA System", 15, pdf.internal.pageSize.height - 10)
  
    pdf.save("water_quality_health_report.pdf")
  }  

  return (
    <div className="container mx-auto px-6 py-8">
      <h1 className="text-4xl font-bold mb-8 text-center text-gray-900">Health Reports</h1>
      <div className="grid md:grid-cols-2 gap-8">
        
        {/* Form Section */}
        <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.5 }}>
          <form onSubmit={generateReport} className="bg-white shadow-lg rounded-lg px-8 pt-6 pb-8">
            <div className="mb-6">
              <label className="block text-gray-700 font-semibold mb-2" htmlFor="location">Location</label>
              <select
                className="w-full border border-gray-300 rounded-md px-4 py-2 focus:ring focus:ring-blue-300"
                id="location"
                name="location"
                value={formData.location}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a location</option>
                {mockLocations.map((loc) => (
                  <option key={loc} value={loc}>{loc}</option>
                ))}
              </select>
            </div>
            
            <div className="mb-6">
              <label className="block text-gray-700 font-semibold mb-2" htmlFor="nearbyWaterBody">Nearby Water Body</label>
              <select
                className="w-full border border-gray-300 rounded-md px-4 py-2 focus:ring focus:ring-blue-300"
                id="nearbyWaterBody"
                name="nearbyWaterBody"
                value={formData.nearbyWaterBody}
                onChange={handleInputChange}
                required
              >
                {mockLakes[formData.location]?.map((lake) => (
                  <option key={lake} value={lake}>{lake}</option>
                ))}
              </select>
            </div>

            <button className="w-full bg-blue-600 hover:bg-blue-800 text-white py-2 px-4 rounded-md transition-all">
              Generate Report
            </button>
          </form>
        </motion.div>

        {/* Report Display Section */}
        <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.5 }}>
          <div className="bg-white shadow-lg rounded-lg px-8 pt-6 pb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">Generated Report</h2>
            <p><strong>Location:</strong> {report.location}</p>
            <p><strong>Nearby Water Body:</strong> {report.nearbyWaterBody}</p>

            <h3 className="text-lg font-bold mt-4">Potential Water-borne Diseases:</h3>
            <ul className="list-disc pl-5 text-gray-700">
              {report.diseases.map((disease, index) => (
                <li key={index}>{disease}</li>
              ))}
            </ul>

            <button onClick={downloadReport} className="mt-6 w-full bg-green-600 hover:bg-green-800 text-white font-semibold py-2 px-4 rounded-md flex items-center justify-center">
              Download Report <Download className="ml-2" size={20} />
            </button>
          </div>
        </motion.div>

      </div>
    </div>
  )
}

export default HealthReports